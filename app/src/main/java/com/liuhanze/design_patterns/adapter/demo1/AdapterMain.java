package com.liuhanze.design_patterns.adapter.demo1;

/**
 * 适配器模式(adapter)/包装模式(wrapper)
 * 将一个类的接口转换成客户希望的另外一个接口，adapter模式使得原本不兼容而不能一起工作的那些类可以一起工作。
 * 适配器模式有两种：类适配器模式和对象适配器模式
 * 由于类适配器模式通过多重继承对一个接口与另一个接口进行匹配，而java不支持多重继承。
 * 使用场景
 * 使用一个已经存在的类，但如果它的接口，也就是它的方法和你的要求不相同时，就应该考虑用适配器模式
 * 两个类所做的事情相同或相似，但是具有不同的接口时要使用它
 * 客户代码可以统一调用同一接口就行了，这样应该可以更简单、更直接、更紧凑。
 * 注意：适配器模式应该在软件开发后期或维护期来使用
 * 在软件设计初期使用适配器模式的例子：比如公司设计一系统时考虑使用第三方开发组件，而这个组件的接口与我们自己的系统接口是不相同的，
 * 而我们也完全没有必要为了迎合它而改动自己的接口，此时尽管是在开发的设计阶段，也是可以考虑用适配器模式来解决接口不同的问题。
 *
 */
public class AdapterMain {

    public void main(){
        Target target = new Adapter();
        target.request();
    }
}
